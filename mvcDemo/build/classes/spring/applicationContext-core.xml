<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	          http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/jdbc
           http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">

	<!-- 注解扫描的包 -->
	<context:component-scan base-package="com.dingmao.mvcdemo" />

	<!-- 属性文件读入 -->
	<context:property-placeholder location="classpath:application.properties" />


	<!-- 数据源JNDI -->
	<!-- bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="java:comp/env/${jndi.name}" /> </bean -->

	<!-- 数据源定义 <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		destroy-method="close"> <property name="driverClassName" value="${jdbc.driverClassName}"/> 
		<property name="url" value="${jdbc.url}"/> <property name="username" value="${jdbc.username}"/> 
		<property name="password" value="${jdbc.password}"/> <property name="maxActive" 
		value="${jdbc.maxActive}"/> <property name="minIdle" value="${jdbc.minIdle}"/> 
		<property name="initialSize" value="${jdbc.initialSize}"/> <property name="maxWait" 
		value="${jdbc.maxWait}"/> </bean> -->

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${datasource.driverClassName}" />
		<property name="jdbcUrl" value="${datasource.url}" />
		<property name="user" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />

		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />

		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<property name="preferredTestQuery" value="select 1" />
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
		<property name="acquireRetryDelay" value="1000" />
		<property name="breakAfterAcquireFailure" value="true" />

		<property name="checkoutTimeout" value="${c3p0.checkoutTimeout}" />

		<property name="autoCommitOnClose" value="false" />
		<property name="forceIgnoreUnresolvedTransactions" value="false" />
		<property name="unreturnedConnectionTimeout" value="1000" />

		<property name="maxStatements" value="0" />
		<property name="maxStatementsPerConnection" value="0" />

		<property name="testConnectionOnCheckin" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
		<property name="usesTraditionalReflectiveProxies" value="false" />

		<property name="numHelperThreads" value="5" />
	</bean>

	<!--Hibernate SessionFatory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />

		<!-- hbm方式配置 mappingLocations搜索指定路径下hibernate配置文件 <property name="mappingLocations" 
			value="classpath*:model/*.hbm.xml"/> -->

		<!-- 注解方式配置 packagesToScan可以自动搜索某个package的全部标记@Entity class -->
		<property name="packagesToScan">
			<list>
				<value>com.**.model</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- 指定Hibernate的连接方言 -->
				<!--常用数据库方言 MySQL5Dialect,SQLServerDialect,OracleDialect,SybaseDialect,DB2Dialect,HSQLDialect -->
				<prop key="hibernate.dialect">${hibernate.dialect} </prop>
				<prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
				<!-- 制定Hibernate是否打印SQL语句 -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- 设create(启动创建),create-drop(启动创建,退出删除),update(启动更新),validate(启动验证) -->
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
			</props>
		</property>
	</bean>

	<!--配置一个hibernateTemplate实例 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 配置事务管理 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 搜索类定义的事务注解@Transactional -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- 支持aop注解 -->
	<aop:aspectj-autoproxy />

	<aop:config>
		<aop:pointcut
			expression="execution(public * com.dingmao.mvcdemo.service.impl.*.*(..))"
			id="businessService" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="businessService" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED" />
			<!-- get开头的方法不需要在事务中运行 。 有些情况是没有必要使用事务的，比如获取数据。开启事务本身对性能是有一定的影响的 -->
			<tx:method name="*" />    <!-- 其他方法在事务中运行 -->
		</tx:attributes>
	</tx:advice>

	<!-- 自动扫描dao和service包(自动注入) <context:component-scan base-package="com.dingmao.mvcdemo.*.dao,com.dingmao.mvcdemo.*.service" 
		/> -->

	<!-- component-scan自动搜索@Repository等标注的类 -->
	<context:component-scan base-package="com.dingmao.mvcdemo.*.dao" />

	<!-- component-scan自动搜索@Service标注的类 -->
	<context:component-scan base-package="com.dingmao.mvcdemo.*.service" />
</beans>